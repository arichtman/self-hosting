version: "3.5"
services:
  reverse-proxy:
    container_name: traefik
    hostname: traefik.${TOP_LEVEL_DOMAIN}
    image: ${TRAEFIK_DOCKER_IMAGE}
    restart: always
    command:
      - --log.level=DEBUG # on for testing
      - --api.insecure=${TRAEFIK_API_INSECURE_ENABLED}
      - --providers.docker=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --certificatesresolvers.myresolver.acme.tlschallenge=true
      - --certificatesresolvers.myresolver.acme.email=${TRAEFIK_LETSENCRYPT_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${BASE_DATA_LOCATION}/proxy/traefik.yaml:/etc/traefik.yaml
      - ${BASE_DATA_LOCATION}/letsencrypt/acme.json:/letsencrypt/acme.json
    labels:
      - traefik.enable=true
      - traefik.http.routers.dashboard.rule=Host(`traefik.${TOP_LEVEL_DOMAIN}`)
      - traefik.http.routers.dashboard.service=api@internal
      - traefik.http.routers.dashboard.tls.certresolver=myresolver
      - traefik.http.routers.dashboard.entrypoints=websecure
      - traefik.http.services.dashboard.loadbalancer.server.port=8080

      - traefik.http.middlewares.auth-mdl.forwardAuth.address=http://forwardauth:4181
      - traefik.http.middlewares.auth-mdl.forwardAuth.authResponseHeaders=X-Forwarded-User
      # This does not resolve the issue
      - traefik.http.middlewares.auth-mdl.forwardAuth.trustForwardHeader=true
    networks:
      - web

  forwardauth:
    container_name: forwardauth
    hostname: forwardauth
    image: thomseddon/traefik-forward-auth:2.2
    restart: unless-stopped
    networks:
      - web
    environment:
      - CLIENT_ID=$GOOGLE_CLIENT_ID
      - CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
      - SECRET=$OAUTH_SECRET
      - COOKIE_DOMAIN=$TOP_LEVEL_DOMAIN
      - AUTH_HOST=forwardauth.$TOP_LEVEL_DOMAIN
      - WHITELIST=$TRAEFIK_LETSENCRYPT_EMAIL
      - INSECURE_COOKIE=false
      - LOG_LEVEL=debug
      - LOG_FORMAT=pretty
      - LIFETIME=60 # Short for testing
      - URL_PATH=_oauth
    # expose:
    #   - 4181
    labels:
      # When these 3 are enabled it loops at the google authentication page
      - traefik.http.routers.oauth.rule=Host(`forwardauth.${TOP_LEVEL_DOMAIN}`)
      - traefik.http.routers.oauth.entrypoints=websecure
      - traefik.http.routers.oauth.tls.certresolver=myresolver
      - traefik.http.routers.oauth.middlewares=auth-mdl
      # This appears to be redundant
      # - traefik.http.routers.oauth.tls=true
      # This definition is not required as long as the port is exposed.
      - traefik.http.services.fwd-auth-svc.loadbalancer.server.port=4181

  whoami:
    container_name: whoami
    hostname: whoami
    image: containous/whoami
    networks:
      - web
    labels:
      - traefik.http.routers.whoami-rtr.rule=Host(`whoami.${TOP_LEVEL_DOMAIN}`)
      - traefik.http.routers.whoami-rtr.entrypoints=websecure
      - traefik.http.routers.whoami-rtr.tls.certresolver=myresolver
      - traefik.http.routers.whoami-rtr.middlewares=auth-mdl
      # Additional router to prove it works
      - traefik.http.routers.whoami-rtr1.rule=Host(`whoami1.${TOP_LEVEL_DOMAIN}`)
      - traefik.http.routers.whoami-rtr1.entrypoints=websecure
      - traefik.http.routers.whoami-rtr1.tls.certresolver=myresolver
    depends_on:
      - reverse-proxy
      - forwardauth

networks:
  web:
    name: web
